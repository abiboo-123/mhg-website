---
import Layout from '../../../layouts/BaseLayout.astro';
import eventsData from '../../../data/events.translated.json';
import { eventImages } from '../../../data/events.js';
import { t } from '../../../utils/t';

export async function getStaticPaths() {
  const langs = ['en', 'de', 'ar'];
  const paths = langs.flatMap(lang =>
    (eventsData[lang as keyof typeof eventsData] ?? []).map((event) => ({
      params: { lang, slug: event.slug }
    }))
  );
  return paths;
}

const { lang, slug } = Astro.params;
const supportedLangs = ['en', 'de', 'ar'];

if (!supportedLangs.includes(lang)) {
  throw new Error(`Invalid language: ${lang}`);
}

const translatedEvents = eventsData[lang as keyof typeof eventsData] ?? eventsData['en'];
const baseEvent = translatedEvents.find((e: { slug: string }) => e.slug === slug);

if (!baseEvent) {
  throw new Error(`No event found for slug: ${slug}`);
}

const event = {
  ...baseEvent,
};
---

<Layout title={`Register ‚Äì ${event.title}`} lang={lang}>
  <section class="max-w-2xl mx-auto px-4 py-12">
    <a href={`/${lang}/events/${slug}`} class="text-sm text-[#0369a1] hover:underline block mb-6">
      ‚Üê {t("events.backToEvent", lang)} {event.title}
    </a>

    <h1 class="text-3xl font-bold mb-6">üìù {t("events.regesterForEvent", lang)} {event.title}</h1>

    <form id="eventForm" class="space-y-4 bg-white p-6 rounded-xl shadow">
      <input type="hidden" name="event" value={event.slug} />

      <div>
        <label for="name" class="block text-sm font-medium mb-1">{t("contact.formName", lang)}</label>
        <input type="text" id="name" name="name" required class="w-full border border-gray-300 p-2 rounded-md focus:outline-none focus:ring-2 focus:ring-[#0369a1]" />
      </div>

      <div>
        <label for="email" class="block text-sm font-medium mb-1">{t("contact.email", lang)}</label>
        <input type="email" id="email" name="email" required class="w-full border border-gray-300 p-2 rounded-md focus:outline-none focus:ring-2 focus:ring-[#0369a1]" />
      </div>

      <div>
        <p class="block text-sm font-medium mb-1">{t("events.Q1", lang)}</p>
        <div class="flex flex-col sm:flex-row sm:space-x-4 space-y-2 sm:space-y-0">
          <label class="flex items-center space-x-2">
            <input type="radio" name="companionship" value="Alone" required />
            <span>{t("events.Q1.option1", lang)}</span>
          </label>
          <label class="flex items-center space-x-2">
            <input type="radio" name="companionship" value="With someone" required />
            <span>{t("events.Q1.option2", lang)}</span>
          </label>
        </div>
      </div>

      <div>
        <p class="block text-sm font-medium mb-1">{t("events.Q2", lang)}</p>
        <div class="flex flex-col sm:flex-row sm:space-x-4 space-y-2 sm:space-y-0">
          <label class="flex items-center space-x-2">
            <input type="radio" name="gender" value="Male" required />
            <span>{t("events.Q2.option1", lang)}</span>
          </label>
          <label class="flex items-center space-x-2">
            <input type="radio" name="gender" value="Female" required />
            <span>{t("events.Q2.option2", lang)}</span>
          </label>
          <label class="flex items-center space-x-2">
            <input type="radio" name="gender" value="Prefer not to say" required />
            <span>{t("events.Q2.option3", lang)}</span>
          </label>
        </div>
      </div>

      <button type="submit" class="w-full bg-[#0369a1] text-white py-2 rounded-full hover:bg-blue-800 transition">
        {t("events.submitBTN", lang)}
      </button>

      <div id="formFeedback" class="mt-4 text-sm hidden"></div>
    </form>
  </section>

  <script is:inline>
    const form = document.getElementById('eventForm');
    const feedback = document.getElementById('formFeedback');

    form.addEventListener('submit', async function (e) {
      e.preventDefault();
      const formData = new FormData(form);

      const response = await fetch("https://formspree.io/f/xblydnqb", {
        method: "POST",
        body: formData,
        headers: { Accept: "application/json" }
      });

      // Translated messages from dataset
      const successMessage = "‚úÖ Thank you for registering! See you at the event!";
      const failureMessage = "‚ùå Something went wrong. Please try again later.";

      if (response.ok) {
        feedback.textContent = successMessage;
        feedback.className = "mt-4 p-3 rounded-md text-green-800 bg-green-100 border border-green-300 text-sm";
        feedback.classList.remove("hidden");
        form.reset();
        setTimeout(() => {
          window.location.href = `/${lang}/thank-you`;
        }, 1000);
      } else {
        feedback.textContent = failureMessage;
        feedback.className = "mt-4 p-3 rounded-md text-red-800 bg-red-100 border border-red-300 text-sm";
        feedback.classList.remove("hidden");
      }
    });
  </script>
</Layout>
